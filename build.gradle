buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'

ext {
    dockerHubUser =  project.hasProperty('DOCKER_HUB_USER') ? DOCKER_HUB_USER : System.getenv('DOCKER_HUB_USER')
    dockerHubEmail =  project.hasProperty('DOCKER_HUB_EMAIL') ? DOCKER_HUB_EMAIL : System.getenv('DOCKER_HUB_EMAIL')
    dockerHubPassword =  project.hasProperty('DOCKER_HUB_PASSWORD') ? DOCKER_HUB_PASSWORD : System.getenv('DOCKER_HUB_PASSWORD')

    port = "5432"
    dockerHostname = 'database.rsobook.fri.si'
    dockerImageName = String.format("%s/%s", dockerHubUser, project.name)
    dockerImageTag = String.format("%s:%s", dockerImageName, "1.0")
    dockerContainerName = String.format("%s", project.name)
}

/**
 * DOCKER TASKS
 */

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

docker {
    registryCredentials {
        url = 'https://hub.docker.com/'
        email = dockerHubEmail
        password = dockerHubPassword
        username = dockerHubUser
    }
}

task dockerfileCreate(type: Dockerfile) {
    group 'docker'
    destFile = project.file('docker/Dockerfile')

    from 'postgres:9.6.5'

    maintainer 'Jan Gasperlin "jg1724@student.uni-lj.si"'
    
    environmentVariable("POSTGRES_USER", 'postgres')
    environmentVariable("POSTGRES_PASSWORD", 'root')

    exposePort {
        String.format("%s:%s", port, port)
    }

    addFile("/sql/create-table-pet.sql", "/usr/sql/create-table-pet.sql")
    addFile("/sql/insert-table-pet.sql", "/usr/sql/insert-table-pet.sql")

    addFile("/sql/create-table-user.sql", "/usr/sql/create-table-user.sql")
    addFile("/sql/insert-table-user.sql", "/usr/sql/insert-table-user.sql")

    addFile("/sql/create-table-user_friends.sql", "/usr/sql/create-table-user_friends.sql")
    addFile("/sql/insert-table-user_friends.sql", "/usr/sql/insert-table-user_friends.sql")

    addFile("/sql/create-table-user_wall.sql", "/usr/sql/create-table-user_wall.sql")
    addFile("/sql/insert-table-user_wall.sql", "/usr/sql/insert-table-user_wall.sql")

    addFile("/sql/create-table-images.sql", "/usr/sql/create-table-images.sql")

    addFile("init-rsobook-db.sh", "/docker-entrypoint-initdb.d/")

}

task containerStop(type: DockerStopContainer) {
    group 'docker'
    targetContainerId {
        dockerContainerName
    }
    onError {
        error -> println error.toString()
    }
}

task containerRemove(type: DockerRemoveContainer) {
    group 'docker'
    dependsOn containerStop
    targetContainerId {
        dockerContainerName
    }
    onError {
        error -> println error.toString()
    }
}

task imageRemove(type: DockerRemoveImage) {
    group 'docker'
    dependsOn containerRemove
    imageId dockerImageTag
    onError {
        error -> println error.toString()
    }
}

task imageBuild(type: DockerBuildImage) {
    group 'docker'
    dependsOn imageRemove
    dependsOn dockerfileCreate
    inputDir = dockerfileCreate.destFile.parentFile
    tag = dockerImageTag
    //noCache = true
}

task imagePushToDockerHub(type: DockerPushImage){
    group 'docker'
    imageName = dockerImageName
    tag = "1.0.1"
}

task containerCreate(type: DockerCreateContainer) {
    group 'docker'
    dependsOn imageBuild
    targetImageId {
        dockerImageTag
    }
    containerName = dockerContainerName
    portBindings = [String.format("5%s:%s", port, port)]
    hostName = dockerHostname
    network = 'rsonetwork'
}

task containerStart(type: DockerStartContainer) {
    group 'docker'
    targetContainerId {
        dockerContainerName
    }
}

task dockerBootstrap() {
    group 'docker'
    dependsOn containerCreate
    dependsOn containerStart
    containerCreate.finalizedBy containerStart
}


